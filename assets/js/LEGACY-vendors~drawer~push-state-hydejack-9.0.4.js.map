{"version":3,"sources":["webpack:///../src/element.ts","webpack:///../src/index.ts","webpack:///../src/lib/css-tag.ts","webpack:///../src/lib/decorators.ts","webpack:///../src/lib/updating-element.ts","webpack:///src/lit-element.ts","webpack:///../src/lib/modify-template.ts","webpack:///../src/lib/shady-render.ts"],"names":[],"mappings":"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","file":"LEGACY-vendors~drawer~push-state-hydejack-9.0.4.js","sourcesContent":["import { LitElement } from \"lit-element\";\nimport { Subject } from \"rxjs\";\n\nexport class RxLitElement extends LitElement {\n  $connected = new Subject<boolean>();\n\n  connectedCallback() { \n    super.connectedCallback();\n    this.$connected.next(true);\n  }\n\n  disconnectedCallback() { \n    super.disconnectedCallback();\n    this.$connected.next(false);\n  }\n\n  private firstUpdate: boolean;\n\n  $: {};\n\n  firstUpdated() {\n    this.firstUpdate = true;\n  }\n\n  updated(changedProperties: Map<string, any>) {\n    if (!this.firstUpdate) for (const prop of changedProperties.keys()) {\n      if (prop in this.$) this.$[prop].next(this[prop]);\n    }\n    this.firstUpdate = false;\n  }\n\n  fireEvent<T>(name: string, eventInitDict?: CustomEventInit<T>) {\n    this.dispatchEvent(new CustomEvent(name, eventInitDict));\n    this.dispatchEvent(new CustomEvent(`${this.tagName.toLowerCase()}-${name}`, eventInitDict));\n  }\n}\n\nexport function applyMixins<T>(derivedCtor: Constructor<T>, baseCtors: Constructor<any>[]) {\n  baseCtors.forEach(baseCtor => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    });\n  });\n  return derivedCtor;\n}","export * from './creators';\nexport * from './element';\nexport * from './observers';\nexport * from './operators';\nexport * from './util';\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const supportsAdoptingStyleSheets =\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n      // is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n *\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the internalProperty decorator.\n *\n * @example\n *\n *     class MyElement {\n *       @property({ type: Boolean })\n *       clicked = false;\n *     }\n *\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n */\nexport function internalProperty(options?: InternalPropertyDeclaration) {\n  return property({attribute: false, hasChanged: options?.hasChanged});\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @query('#first')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n *\n */\nexport function query(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @queryAsync('#first')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n *\n *     // external usage\n *     async doSomethingWithFirst() {\n *      (await aMyElement.first).doSomething();\n *     }\n */\nexport function queryAsync(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      async get(this: LitElement) {\n        await this.updateComplete;\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n *\n *     class MyElement {\n *       @queryAll('div')\n *       divs;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *       clicked = false;\n *\n *       render() {\n *         return html`\n *           <div @click=${this._onClick}`>\n *             <button></button>\n *           </div>\n *         `;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n              (name !== undefined) ?\n              legacyEventOptions(options, protoOrDescriptor as Object, name) :\n              standardEventOptions(\n                  options, protoOrDescriptor as ClassElement)) as\n             // tslint:disable-next-line:no-any decorator\n             any;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n */\nexport function queryAssignedNodes(\n    slotName: string = '', flatten: boolean = false) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        const selector = `slot${slotName ? `[name=${slotName}]` : ''}`;\n        const slot = this.renderRoot.querySelector(selector);\n        return slot && (slot as HTMLSlotElement).assignedNodes({flatten});\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|\n    ((value: string|null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * Map of changed properties with old values. Takes an optional generic\n * interface corresponding to the declared element properties.\n */\n// tslint:disable-next-line:no-any\nexport type PropertyValues<T = any> =\n    keyof T extends PropertyKey ? Map<keyof T, unknown>: never;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY;\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static[finalized] = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a PropertyDeclaration for the property with the given options.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   *\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    const descriptor = this.getPropertyDescriptor(name, key, options);\n    if (descriptor !== undefined) {\n      Object.defineProperty(this.prototype, name, descriptor);\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   *   class MyElement extends LitElement {\n   *     static getPropertyDescriptor(name, key, options) {\n   *       const defaultDescriptor =\n   *           super.getPropertyDescriptor(name, key, options);\n   *       const setter = defaultDescriptor.set;\n   *       return {\n   *         get: defaultDescriptor.get,\n   *         set(value) {\n   *           setter.call(this, value);\n   *           // custom action.\n   *         },\n   *         configurable: true,\n   *         enumerable: true\n   *       }\n   *     }\n   *   }\n   *\n   * @nocollapse\n   */\n  protected static getPropertyDescriptor(\n      name: PropertyKey, key: string|symbol, _options: PropertyDeclaration) {\n    return {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)._requestUpdate(name, oldValue);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a PropertyDeclaration via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override `createProperty`.\n   *\n   * @nocollapse\n   * @final\n   */\n  protected static getPropertyOptions(name: PropertyKey) {\n    return this._classProperties && this._classProperties.get(name) ||\n        defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n    this[finalized] = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private _updatePromise =\n      new Promise((res) => this._enableUpdatingResolver = res);\n  private _enableUpdatingResolver: (() => void)|undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this._requestUpdate();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection.\n    this.enableUpdating();\n  }\n\n  protected enableUpdating() {\n    if (this._enableUpdatingResolver !== undefined) {\n      this._enableUpdatingResolver();\n      this._enableUpdatingResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    const propName = (ctor._attributeToPropertyMap as AttributeMap).get(name);\n    if (propName !== undefined) {\n      const options = ctor.getPropertyOptions(propName);\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This private version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  private _requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      const options = ctor.getPropertyOptions(name);\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._updatePromise = this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this._requestUpdate(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this._updatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    const result = this.performUpdate();\n    // If `performUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this._hasRequestedUpdate;\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      } else {\n        this._markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n      throw e;\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n  protected _getUpdateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n    this._markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {render, ShadyRenderOptions} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.3.1');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n\n  /**\n   * Render method used to render the value to the element's DOM.\n   * @param result The value to render.\n   * @param container Node into which to render.\n   * @param options Element name.\n   * @nocollapse\n   */\n  static render:\n      (result: unknown, container: Element|DocumentFragment,\n       options: ShadyRenderOptions) => void = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /**\n   * Return the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * @nocollapse\n   */\n  static getStyles(): CSSResult|CSSResultArray|undefined {\n    return this.styles;\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles() {\n    // Only gather styles once per class\n    if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n      return;\n    }\n    // Take care not to call `this.getStyles()` multiple times since this\n    // generates new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.getStyles();\n    if (userStyles === undefined) {\n      this._styles = [];\n    } else if (Array.isArray(userStyles)) {\n      // De-duplicate styles preserving the _last_ instance in the set.\n      // This is a performance optimization to avoid duplicated styles that can\n      // occur especially when composing via subclassing.\n      // The last item is kept to try to preserve the cascade order with the\n      // assumption that it's most important that last added styles override\n      // previous styles.\n      const addStyles =\n          (styles: CSSResultArray, set: Set<CSSResult>): Set<CSSResult> =>\n              styles.reduceRight(\n                  (set: Set<CSSResult>, s) =>\n                      // Note: On IE set.add() does not return the set\n                  Array.isArray(s) ? addStyles(s, set) : (set.add(s), set),\n                  set);\n      // Array.from does not work on Set in IE, otherwise return\n      // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n      const set = addStyles(userStyles, new Set<CSSResult>());\n      const styles: CSSResult[] = [];\n      set.forEach((v) => styles.unshift(v));\n      this._styles = styles;\n    } else {\n      this._styles = [userStyles];\n    }\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this.constructor as typeof LitElement)._getUniqueStyles();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const templateResult = this.render();\n    super.update(changedProperties);\n    // If render is not implemented by the component, don't call lit-html render\n    if (templateResult !== renderNotImplemented) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's NodePart - typically a TemplateResult.\n   * Setting properties inside this method will *not* trigger the element to\n   * update.\n   */\n  protected render(): unknown {\n    return renderNotImplemented;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (scopeName: string, renderedDOM: DocumentFragment, template?: Template) => {\n      shadyRenderSet.add(scopeName);\n      // If `renderedDOM` is stamped from a Template, then we need to edit that\n      // Template's underlying template element. Otherwise, we create one here\n      // to give to ShadyCSS, which still requires one while scoping.\n      const templateElement =\n          !!template ? template.element : document.createElement('template');\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = templateElement.content;\n      if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      } else {\n        content.insertBefore(condensedStyle, content.firstChild);\n      }\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set<Node>();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(\n            scopeName, renderContainer as DocumentFragment, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n"],"sourceRoot":""}