{"version":3,"sources":["webpack:///../src/directives/if-defined.ts","webpack:///../src/directives/repeat.ts","webpack:///./node_modules/path-browserify/index.js","webpack:///./node_modules/process/browser.js"],"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","exports","resolve","resolvedPath","resolvedAbsolute","arguments","path","process","cwd","TypeError","charAt","filter","split","p","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","prototype","slice","call","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","push","concat","sep","delimiter","dirname","code","charCodeAt","hasRoot","matchedSlash","basename","ext","f","extname","startDot","startPart","preDotState","xs","res","str","len","module","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","setTimeout","e","clearTimeout","runTimeout","fun","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","drainQueue","timeout","run","nextTick","args","Item","array","apply","title","browser","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","chdir","dir","umask"],"mappings":"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","file":"vendors~search-hydejack-9.0.4.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part} from '../lit-html.js';\n\nconst previousValues = new WeakMap<Part, unknown>();\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value: unknown) => (part: Part) => {\n  const previousValue = previousValues.get(part);\n\n  if (value === undefined && part instanceof AttributePart) {\n    // If the value is undefined, remove the attribute, but only if the value\n    // was previously defined.\n    if (previousValue !== undefined || !previousValues.has(part)) {\n      const name = part.committer.name;\n      part.committer.element.removeAttribute(name);\n    }\n  } else if (value !== previousValue) {\n    part.setValue(value);\n  }\n\n  previousValues.set(part, value);\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {DirectiveFn} from '../lib/directive.js';\nimport {createMarker, directive, NodePart, Part, removeNodes, reparentNodes} from '../lit-html.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart =\n    (containerPart: NodePart, beforePart?: NodePart): NodePart => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = beforePart === undefined ? containerPart.endNode :\n                                                    beforePart.startNode;\n      const startNode = container.insertBefore(createMarker(), beforeNode);\n      container.insertBefore(createMarker(), beforeNode);\n      const newPart = new NodePart(containerPart.options);\n      newPart.insertAfterNode(startNode);\n      return newPart;\n    };\n\nconst updatePart = (part: NodePart, value: unknown) => {\n  part.setValue(value);\n  part.commit();\n  return part;\n};\n\nconst insertPartBefore =\n    (containerPart: NodePart, part: NodePart, ref?: NodePart) => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = ref ? ref.startNode : containerPart.endNode;\n      const endNode = part.endNode.nextSibling;\n      if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n      }\n    };\n\nconst removePart = (part: NodePart) => {\n  removeNodes(\n      part.startNode.parentNode!, part.startNode, part.endNode.nextSibling);\n};\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap<NodePart, (NodePart | null)[]>();\nconst keyListCache = new WeakMap<NodePart, unknown[]>();\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat =\n    directive(\n        <T>(items: Iterable<T>,\n            keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n            template?: ItemTemplate<T>):\n            DirectiveFn => {\n              let keyFn: KeyFn<T>;\n              if (template === undefined) {\n                template = keyFnOrTemplate;\n              } else if (keyFnOrTemplate !== undefined) {\n                keyFn = keyFnOrTemplate as KeyFn<T>;\n              }\n\n              return (containerPart: Part): void => {\n                if (!(containerPart instanceof NodePart)) {\n                  throw new Error('repeat can only be used in text bindings');\n                }\n                // Old part & key lists are retrieved from the last update\n                // (associated with the part for this instance of the directive)\n                const oldParts = partListCache.get(containerPart) || [];\n                const oldKeys = keyListCache.get(containerPart) || [];\n\n                // New part list will be built up as we go (either reused from\n                // old parts or created for new keys in this update). This is\n                // saved in the above cache at the end of the update.\n                const newParts: NodePart[] = [];\n\n                // New value list is eagerly generated from items along with a\n                // parallel array indicating its key.\n                const newValues: unknown[] = [];\n                const newKeys: unknown[] = [];\n                let index = 0;\n                for (const item of items) {\n                  newKeys[index] = keyFn ? keyFn(item, index) : index;\n                  newValues[index] = template !(item, index);\n                  index++;\n                }\n\n                // Maps from key to index for current and previous update; these\n                // are generated lazily only when needed as a performance\n                // optimization, since they are only required for multiple\n                // non-contiguous changes in the list, which are less common.\n                let newKeyToIndexMap!: Map<unknown, number>;\n                let oldKeyToIndexMap!: Map<unknown, number>;\n\n                // Head and tail pointers to old parts and new values\n                let oldHead = 0;\n                let oldTail = oldParts.length - 1;\n                let newHead = 0;\n                let newTail = newValues.length - 1;\n\n                // Overview of O(n) reconciliation algorithm (general approach\n                // based on ideas found in ivi, vue, snabbdom, etc.):\n                //\n                // * We start with the list of old parts and new values (and\n                //   arrays of their respective keys), head/tail pointers into\n                //   each, and we build up the new list of parts by updating\n                //   (and when needed, moving) old parts or creating new ones.\n                //   The initial scenario might look like this (for brevity of\n                //   the diagrams, the numbers in the array reflect keys\n                //   associated with the old parts or new values, although keys\n                //   and parts/values are actually stored in parallel arrays\n                //   indexed using the same head/tail pointers):\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n                //                                      item order\n                //      newHead ^                 ^ newTail\n                //\n                // * Iterate old & new lists from both sides, updating,\n                //   swapping, or removing parts at the head/tail locations\n                //   until neither head nor tail can move.\n                //\n                // * Example below: keys at head pointers match, so update old\n                //   part 0 in-place (no need to move it) and record part 0 in\n                //   the `newParts` list. The last thing we do is advance the\n                //   `oldHead` and `newHead` pointers (will be reflected in the\n                //   next diagram).\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //      newHead ^                 ^ newTail\n                //\n                // * Example below: head pointers don't match, but tail\n                //   pointers do, so update part 6 in place (no need to move\n                //   it), and record part 6 in the `newParts` list. Last,\n                //   advance the `oldTail` and `oldHead` pointers.\n                //\n                //         oldHead v              v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n                //                                      & newTail\n                //         newHead ^              ^ newTail\n                //\n                // * If neither head nor tail match; next check if one of the\n                //   old head/tail items was removed. We first need to generate\n                //   the reverse map of new keys to index (`newKeyToIndexMap`),\n                //   which is done once lazily as a performance optimization,\n                //   since we only hit this case if multiple non-contiguous\n                //   changes were made. Note that for contiguous removal\n                //   anywhere in the list, the head and tails would advance\n                //   from either end and pass each other before we get to this\n                //   case and removals would be handled in the final while loop\n                //   without needing to generate the map.\n                //\n                // * Example below: The key at `oldTail` was removed (no longer\n                //   in the `newKeyToIndexMap`), so remove that part from the\n                //   DOM and advance just the `oldTail` pointer.\n                //\n                //         oldHead v           v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n                //         newHead ^           ^ newTail\n                //\n                // * Once head and tail cannot move, any mismatches are due to\n                //   either new or moved items; if a new key is in the previous\n                //   \"old key to old index\" map, move the old part to the new\n                //   location, otherwise create and insert a new part. Note\n                //   that when moving an old part we null its position in the\n                //   oldParts array if it lies between the head and tail so we\n                //   know to skip it when the pointers get there.\n                //\n                // * Example below: neither head nor tail match, and neither\n                //   were removed; so find the `newHead` key in the\n                //   `oldKeyToIndexMap`, and move that old part's DOM into the\n                //   next head position (before `oldParts[oldHead]`). Last,\n                //   null the part in the `oldPart` array since it was\n                //   somewhere in the remaining oldParts still to be scanned\n                //   (between the head and tail pointers) so that we know to\n                //   skip that old part on future iterations.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n                //                                      newHead\n                //         newHead ^           ^ newTail\n                //\n                // * Note that for moves/insertions like the one above, a part\n                //   inserted at the head pointer is inserted before the\n                //   current `oldParts[oldHead]`, and a part inserted at the\n                //   tail pointer is inserted before `newParts[newTail+1]`. The\n                //   seeming asymmetry lies in the fact that new parts are\n                //   moved into place outside in, so to the right of the head\n                //   pointer are old parts, and to the right of the tail\n                //   pointer are new parts.\n                //\n                // * We always restart back from the top of the algorithm,\n                //   allowing matching and simple updates in place to\n                //   continue...\n                //\n                // * Example below: the head pointers once again match, so\n                //   simply update part 1 and record it in the `newParts`\n                //   array.  Last, advance both head pointers.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //            newHead ^        ^ newTail\n                //\n                // * As mentioned above, items that were moved as a result of\n                //   being stuck (the final else clause in the code below) are\n                //   marked with null, so we always advance old pointers over\n                //   these so we're comparing the next actual old value on\n                //   either end.\n                //\n                // * Example below: `oldHead` is null (already placed in\n                //   newParts), so advance `oldHead`.\n                //\n                //            oldHead v     v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n                //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //               newHead ^     ^ newTail\n                //\n                // * Note it's not critical to mark old parts as null when they\n                //   are moved from head to tail or tail to head, since they\n                //   will be outside the pointer range and never visited again.\n                //\n                // * Example below: Here the old tail key matches the new head\n                //   key, so the part at the `oldTail` position and move its\n                //   DOM to the new head position (before `oldParts[oldHead]`).\n                //   Last, advance `oldTail` and `newHead` pointers.\n                //\n                //               oldHead v  v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n                //                                     advance oldTail & newHead\n                //               newHead ^     ^ newTail\n                //\n                // * Example below: Old and new head keys match, so update the\n                //   old head part in place, and advance the `oldHead` and\n                //   `newHead` pointers.\n                //\n                //               oldHead v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n                //                                      newHead\n                //                  newHead ^  ^ newTail\n                //\n                // * Once the new or old pointers move past each other then all\n                //   we have left is additions (if old list exhausted) or\n                //   removals (if new list exhausted). Those are handled in the\n                //   final while loops at the end.\n                //\n                // * Example below: `oldHead` exceeded `oldTail`, so we're done\n                //   with the main loop.  Create the remaining part and insert\n                //   it at the new head position, and the update is complete.\n                //\n                //                   (oldHead > oldTail)\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //                     newHead ^ newTail\n                //\n                // * Note that the order of the if/else clauses is not\n                //   important to the algorithm, as long as the null checks\n                //   come first (to ensure we're always working on valid old\n                //   parts) and that the final else clause comes last (since\n                //   that's where the expensive moves occur). The order of\n                //   remaining clauses is is just a simple guess at which cases\n                //   will be most common.\n                //\n                // * TODO(kschaaf) Note, we could calculate the longest\n                //   increasing subsequence (LIS) of old items in new position,\n                //   and only move those not in the LIS set. However that costs\n                //   O(nlogn) time and adds a bit more code, and only helps\n                //   make rare types of mutations require fewer moves. The\n                //   above handles removes, adds, reversal, swaps, and single\n                //   moves of contiguous items in linear time, in the minimum\n                //   number of moves. As the number of multiple moves where LIS\n                //   might help approaches a random shuffle, the LIS\n                //   optimization becomes less helpful, so it seems not worth\n                //   the code at this point. Could reconsider if a compelling\n                //   case arises.\n\n                while (oldHead <= oldTail && newHead <= newTail) {\n                  if (oldParts[oldHead] === null) {\n                    // `null` means old part at head has already been used\n                    // below; skip\n                    oldHead++;\n                  } else if (oldParts[oldTail] === null) {\n                    // `null` means old part at tail has already been used\n                    // below; skip\n                    oldTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newHead]) {\n                    // Old head matches new head; update in place\n                    newParts[newHead] =\n                        updatePart(oldParts[oldHead]!, newValues[newHead]);\n                    oldHead++;\n                    newHead++;\n                  } else if (oldKeys[oldTail] === newKeys[newTail]) {\n                    // Old tail matches new tail; update in place\n                    newParts[newTail] =\n                        updatePart(oldParts[oldTail]!, newValues[newTail]);\n                    oldTail--;\n                    newTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newTail]) {\n                    // Old head matches new tail; update and move to new tail\n                    newParts[newTail] =\n                        updatePart(oldParts[oldHead]!, newValues[newTail]);\n                    insertPartBefore(\n                        containerPart,\n                        oldParts[oldHead]!,\n                        newParts[newTail + 1]);\n                    oldHead++;\n                    newTail--;\n                  } else if (oldKeys[oldTail] === newKeys[newHead]) {\n                    // Old tail matches new head; update and move to new head\n                    newParts[newHead] =\n                        updatePart(oldParts[oldTail]!, newValues[newHead]);\n                    insertPartBefore(\n                        containerPart, oldParts[oldTail]!, oldParts[oldHead]!);\n                    oldTail--;\n                    newHead++;\n                  } else {\n                    if (newKeyToIndexMap === undefined) {\n                      // Lazily generate key-to-index maps, used for removals &\n                      // moves below\n                      newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                      oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                    }\n                    if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                      // Old head is no longer in new list; remove\n                      removePart(oldParts[oldHead]!);\n                      oldHead++;\n                    } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                      // Old tail is no longer in new list; remove\n                      removePart(oldParts[oldTail]!);\n                      oldTail--;\n                    } else {\n                      // Any mismatches at this point are due to additions or\n                      // moves; see if we have an old part we can reuse and move\n                      // into place\n                      const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                      const oldPart =\n                          oldIndex !== undefined ? oldParts[oldIndex] : null;\n                      if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(\n                            containerPart, oldParts[oldHead]!);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                      } else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(\n                            containerPart, oldPart, oldParts[oldHead]!);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex as number] = null;\n                      }\n                      newHead++;\n                    }\n                  }\n                }\n                // Add parts for any remaining new values\n                while (newHead <= newTail) {\n                  // For all remaining additions, we insert before last new\n                  // tail, since old pointers are no longer valid\n                  const newPart =\n                      createAndInsertPart(containerPart, newParts[newTail + 1]);\n                  updatePart(newPart, newValues[newHead]);\n                  newParts[newHead++] = newPart;\n                }\n                // Remove any remaining unused old parts\n                while (oldHead <= oldTail) {\n                  const oldPart = oldParts[oldHead++];\n                  if (oldPart !== null) {\n                    removePart(oldPart);\n                  }\n                }\n                // Save order of new parts for next round\n                partListCache.set(containerPart, newParts);\n                keyListCache.set(containerPart, newKeys);\n              };\n            }) as\n    <T>(items: Iterable<T>,\n        keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n        template?: ItemTemplate<T>) => DirectiveFn;\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":""}